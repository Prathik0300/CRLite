/*! murmurhash3js - https://github.com/pid/murmurHash3js */
var MurmurHash3 = MurmurHash3 || {};
MurmurHash3.x86 = {
  hash32: function (k, seed) {
    var remainder, bytes, h1, h1b, c1, c2, k1, i;
    remainder = k.length & 3;
    bytes = k.length - remainder;
    h1 = seed;
    c1 = 0xcc9e2d51;
    c2 = 0x1b873593;
    i = 0;
    while (i < bytes) {
      k1 =
        (k.charCodeAt(i) & 0xff) |
        ((k.charCodeAt(++i) & 0xff) << 8) |
        ((k.charCodeAt(++i) & 0xff) << 16) |
        ((k.charCodeAt(++i) & 0xff) << 24);
      ++i;
      k1 =
        ((k1 & 0xffff) * c1 + ((((k1 >>> 16) * c1) & 0xffff) << 16)) &
        0xffffffff;
      k1 = (k1 << 15) | (k1 >>> 17);
      k1 =
        ((k1 & 0xffff) * c2 + ((((k1 >>> 16) * c2) & 0xffff) << 16)) &
        0xffffffff;
      h1 ^= k1;
      h1 = (h1 << 13) | (h1 >>> 19);
      h1b =
        ((h1 & 0xffff) * 5 + ((((h1 >>> 16) * 5) & 0xffff) << 16)) & 0xffffffff;
      h1 = (h1b & 0xffff) + 0x6b64 + ((((h1b >>> 16) + 0xe654) & 0xffff) << 16);
    }
    k1 = 0;
    switch (remainder) {
      case 3:
        k1 ^= (k.charCodeAt(i + 2) & 0xff) << 16;
      case 2:
        k1 ^= (k.charCodeAt(i + 1) & 0xff) << 8;
      case 1:
        k1 ^= k.charCodeAt(i) & 0xff;
        k1 =
          ((k1 & 0xffff) * c1 + ((((k1 >>> 16) * c1) & 0xffff) << 16)) &
          0xffffffff;
        k1 = (k1 << 15) | (k1 >>> 17);
        k1 =
          ((k1 & 0xffff) * c2 + ((((k1 >>> 16) * c2) & 0xffff) << 16)) &
          0xffffffff;
        h1 ^= k1;
    }
    h1 ^= k.length;
    h1 ^= h1 >>> 16;
    h1 =
      ((h1 & 0xffff) * 0x85ebca6b +
        ((((h1 >>> 16) * 0x85ebca6b) & 0xffff) << 16)) &
      0xffffffff;
    h1 ^= h1 >>> 13;
    h1 =
      ((h1 & 0xffff) * 0xc2b2ae35 +
        ((((h1 >>> 16) * 0xc2b2ae35) & 0xffff) << 16)) &
      0xffffffff;
    h1 ^= h1 >>> 16;
    return h1 >>> 0;
  },
};
